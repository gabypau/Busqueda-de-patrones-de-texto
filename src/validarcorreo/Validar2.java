/* The following code was generated by JFlex 1.4.3 on 16/10/12 02:38 PM */

package validarcorreo;
import static validarcorreo.Palabra2.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/10/12 02:38 PM from the specification file
 * <tt>C:/Users/Nathy/Documents/NetBeansProjects/ExRegVcVd/src/validarcorreo/lexer2.flex</tt>
 */
class Validar2 {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\5\2\0\1\0\22\0\1\0\13\0\1\0\2\2"+
    "\1\0\12\1\6\0\1\3\32\1\4\0\1\2\1\0\1\14\1\25"+
    "\1\6\1\21\1\11\1\24\1\16\1\4\1\23\2\4\1\13\1\10"+
    "\1\17\1\7\2\4\1\15\1\12\1\20\1\22\4\4\1\26\1\0"+
    "\1\2\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\51\1\1\2\7\1\1\2\16\1\1\2\5\1"+
    "\1\2\3\1\1\2\1\1\2\2\3\1\1\2\1\1"+
    "\1\2\226\1\1\2\4\1\1\2\6\1\1\2\2\1"+
    "\2\2\24\1\1\2\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\27\0\56\0\105\0\134\0\163\0\212\0\241"+
    "\0\270\0\317\0\346\0\163\0\212\0\241\0\270\0\317"+
    "\0\346\0\375\0\u0114\0\u012b\0\u0142\0\u0159\0\u0170\0\u0187"+
    "\0\u019e\0\u01b5\0\u01cc\0\u01e3\0\u01fa\0\u0211\0\u0228\0\u023f"+
    "\0\u0256\0\u026d\0\u0284\0\u029b\0\u02b2\0\u02c9\0\u02e0\0\u02f7"+
    "\0\u030e\0\u0325\0\u033c\0\u0353\0\u036a\0\u0381\0\u0398\0\u03af"+
    "\0\u03c6\0\u03dd\0\u03f4\0\u040b\0\163\0\u0422\0\u0439\0\u0450"+
    "\0\u0467\0\u047e\0\u0495\0\u04ac\0\u012b\0\u04c3\0\u04da\0\u04f1"+
    "\0\u0508\0\u051f\0\u0536\0\u054d\0\u0564\0\u057b\0\u0592\0\u05a9"+
    "\0\u05c0\0\u05d7\0\u05ee\0\u0159\0\u0605\0\u061c\0\u0633\0\u064a"+
    "\0\u0661\0\u0678\0\u068f\0\u06a6\0\u06bd\0\u06d4\0\u06eb\0\u0702"+
    "\0\u0719\0\u0730\0\u0747\0\u075e\0\u0775\0\u078c\0\u07a3\0\u07ba"+
    "\0\u07d1\0\u07e8\0\u07ff\0\u0816\0\u082d\0\u0844\0\u085b\0\u0872"+
    "\0\u0889\0\u08a0\0\u08b7\0\u08ce\0\u08e5\0\u08fc\0\u0913\0\u092a"+
    "\0\u0941\0\u0958\0\u096f\0\u0986\0\u099d\0\u09b4\0\u09cb\0\u09e2"+
    "\0\u09f9\0\u0a10\0\u0a27\0\u0a3e\0\u0a55\0\u0a6c\0\u0a83\0\u0a9a"+
    "\0\u0ab1\0\u0ac8\0\u0adf\0\u0af6\0\u0b0d\0\u0b24\0\u0b3b\0\u0b52"+
    "\0\u0b69\0\u0b80\0\u0b97\0\u0bae\0\u0bc5\0\u0bdc\0\u0bf3\0\u0c0a"+
    "\0\u0c21\0\u0c38\0\u0c4f\0\u0c66\0\u0c7d\0\u0c94\0\u0cab\0\u0cc2"+
    "\0\u0cd9\0\u0cf0\0\u0d07\0\u0d1e\0\u0d35\0\u0d4c\0\u0d63\0\u0d7a"+
    "\0\u0d91\0\u0da8\0\u0dbf\0\u0dd6\0\u0ded\0\u0e04\0\u0e1b\0\u0e32"+
    "\0\u0e49\0\u0e60\0\u0e77\0\u0e8e\0\u0ea5\0\u0ebc\0\u0ed3\0\u0eea"+
    "\0\u0f01\0\u0f18\0\u0f2f\0\u0f46\0\u0f5d\0\u0f74\0\u0f8b\0\u0fa2"+
    "\0\u0fb9\0\u0fd0\0\u0fe7\0\u0ffe\0\u1015\0\u102c\0\u1043\0\u105a"+
    "\0\u1071\0\u1088\0\u109f\0\u10b6\0\u10cd\0\u10e4\0\u10fb\0\u1112"+
    "\0\u1129\0\u1140\0\u1157\0\u116e\0\u1185\0\u119c\0\u11b3\0\u11ca"+
    "\0\u11e1\0\u11f8\0\u120f\0\u1226\0\u123d\0\u1254\0\u126b\0\u1282"+
    "\0\u1299\0\u12b0\0\u12c7\0\u12de\0\u12f5\0\u130c\0\u1323\0\u133a"+
    "\0\u1351\0\u1368\0\u137f\0\u1396\0\u13ad\0\u13c4\0\u13db\0\u13f2"+
    "\0\u1409\0\u1420\0\u1437\0\u144e\0\u1465\0\u147c\0\u1493\0\u14aa"+
    "\0\u14c1\0\u14d8\0\u14ef\0\u1506\0\u151d\0\u0211\0\u1534\0\u154b"+
    "\0\u1562\0\u1579\0\u0353\0\u1590\0\u15a7\0\u15be\0\u15d5\0\u15ec"+
    "\0\u1603\0\u0256\0\u161a\0\u1631\0\u15d5\0\u1648\0\u165f\0\u1676"+
    "\0\u168d\0\u16a4\0\u16bb\0\u06d4\0\u16d2\0\u16e9\0\u1700\0\u1717"+
    "\0\u172e\0\u1745\0\u175c\0\u1773\0\u178a\0\u17a1\0\u17b8\0\u17cf"+
    "\0\u17e6\0\u17fd\0\u1700\0\u1814";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\0\21\3\5\6"+
    "\1\0\22\6\1\7\1\10\1\11\1\7\1\0\21\7"+
    "\1\6\1\10\1\6\1\12\1\10\1\0\21\10\4\6"+
    "\1\13\1\0\21\13\5\14\1\0\22\14\1\15\1\16"+
    "\1\17\1\15\1\0\21\15\1\14\1\16\1\14\1\20"+
    "\1\16\1\0\21\16\4\14\1\21\1\0\21\21\4\14"+
    "\1\22\1\0\21\22\4\23\1\24\1\0\21\24\4\25"+
    "\1\26\1\0\21\26\5\14\1\0\1\27\1\30\1\14"+
    "\1\31\4\14\1\32\1\33\3\14\1\34\1\14\1\35"+
    "\1\14\4\23\1\24\1\0\1\36\1\37\1\24\1\40"+
    "\4\24\1\41\1\42\3\24\1\43\1\24\1\44\1\24"+
    "\5\14\1\0\1\45\1\46\1\14\1\47\4\14\1\50"+
    "\1\51\3\14\1\52\1\14\1\53\1\14\4\25\1\26"+
    "\1\0\1\54\1\55\1\26\1\56\4\26\1\57\1\60"+
    "\3\26\1\61\1\26\1\62\1\26\5\14\1\0\1\14"+
    "\1\63\24\14\1\0\7\14\1\64\16\14\1\0\4\14"+
    "\1\65\6\14\1\66\12\14\1\0\1\14\1\67\24\14"+
    "\1\0\3\14\1\70\22\14\1\0\11\14\1\71\14\14"+
    "\1\0\15\14\1\72\3\14\4\23\1\24\1\0\1\36"+
    "\1\73\1\24\1\40\4\24\1\41\1\42\3\24\1\43"+
    "\1\24\1\44\1\24\4\23\1\24\1\0\1\36\1\37"+
    "\1\24\1\40\3\24\1\74\1\41\1\42\3\24\1\43"+
    "\1\24\1\44\1\24\4\23\1\24\1\0\1\36\1\37"+
    "\1\24\1\40\1\75\3\24\1\41\1\42\1\24\1\76"+
    "\1\24\1\43\1\24\1\44\1\24\4\23\1\24\1\0"+
    "\1\36\1\77\1\24\1\40\4\24\1\41\1\42\3\24"+
    "\1\43\1\24\1\44\1\24\4\23\1\24\1\0\1\36"+
    "\1\37\1\24\1\100\4\24\1\41\1\42\3\24\1\43"+
    "\1\24\1\44\1\24\4\23\1\24\1\0\1\36\1\37"+
    "\1\24\1\40\4\24\1\41\1\101\3\24\1\43\1\24"+
    "\1\44\1\24\4\23\1\24\1\0\1\36\1\37\1\24"+
    "\1\40\4\24\1\41\1\42\3\24\1\102\1\24\1\44"+
    "\1\24\5\14\1\0\1\14\1\103\24\14\1\0\7\14"+
    "\1\104\16\14\1\0\4\14\1\65\6\14\1\105\12\14"+
    "\1\0\1\14\1\106\24\14\1\0\3\14\1\107\22\14"+
    "\1\0\11\14\1\110\14\14\1\0\15\14\1\111\3\14"+
    "\4\25\1\26\1\0\1\54\1\112\1\26\1\56\4\26"+
    "\1\57\1\60\3\26\1\61\1\26\1\62\1\26\4\25"+
    "\1\26\1\0\1\54\1\55\1\26\1\56\3\26\1\113"+
    "\1\57\1\60\3\26\1\61\1\26\1\62\1\26\4\25"+
    "\1\26\1\0\1\54\1\55\1\26\1\56\1\114\3\26"+
    "\1\57\1\60\1\26\1\115\1\26\1\61\1\26\1\62"+
    "\1\26\4\25\1\26\1\0\1\54\1\116\1\26\1\56"+
    "\4\26\1\57\1\60\3\26\1\61\1\26\1\62\1\26"+
    "\4\25\1\26\1\0\1\54\1\55\1\26\1\117\4\26"+
    "\1\57\1\60\3\26\1\61\1\26\1\62\1\26\4\25"+
    "\1\26\1\0\1\54\1\55\1\26\1\56\4\26\1\57"+
    "\1\120\3\26\1\61\1\26\1\62\1\26\4\25\1\26"+
    "\1\0\1\54\1\55\1\26\1\56\4\26\1\57\1\60"+
    "\3\26\1\121\1\26\1\62\1\26\5\14\1\0\2\14"+
    "\1\122\23\14\1\0\10\14\1\123\15\14\1\0\14\14"+
    "\1\124\11\14\1\0\17\14\1\125\6\14\1\0\12\14"+
    "\1\126\13\14\1\0\16\14\1\127\7\14\1\0\20\14"+
    "\1\130\4\23\1\24\1\0\1\36\1\37\1\131\1\40"+
    "\3\24\1\74\1\41\1\42\3\24\1\43\1\24\1\44"+
    "\1\24\4\23\1\24\1\0\1\36\1\37\1\24\1\40"+
    "\4\24\1\132\1\42\3\24\1\43\1\24\1\44\1\24"+
    "\4\23\1\24\1\0\1\36\1\37\1\24\1\40\4\24"+
    "\1\41\1\42\2\24\1\133\1\43\1\24\1\44\1\24"+
    "\4\23\1\24\1\0\1\36\1\37\1\24\1\40\3\24"+
    "\1\74\1\41\1\42\3\24\1\43\1\24\1\134\1\24"+
    "\4\23\1\24\1\0\1\36\1\37\1\24\1\40\1\75"+
    "\3\24\1\41\1\42\1\135\1\76\1\24\1\43\1\24"+
    "\1\44\1\24\4\23\1\24\1\0\1\36\1\37\1\24"+
    "\1\100\4\24\1\41\1\42\3\24\1\43\1\136\1\44"+
    "\1\24\4\23\1\24\1\0\1\36\1\37\1\24\1\40"+
    "\4\24\1\41\1\101\3\24\1\43\1\24\1\44\1\137"+
    "\5\14\1\0\2\14\1\65\23\14\1\0\10\14\1\140"+
    "\15\14\1\0\14\14\1\141\11\14\1\0\17\14\1\142"+
    "\6\14\1\0\12\14\1\65\13\14\1\0\16\14\1\143"+
    "\7\14\1\0\20\14\1\65\4\25\1\26\1\0\1\54"+
    "\1\55\1\114\1\56\3\26\1\113\1\57\1\60\3\26"+
    "\1\61\1\26\1\62\1\26\4\25\1\26\1\0\1\54"+
    "\1\55\1\26\1\56\4\26\1\144\1\60\3\26\1\61"+
    "\1\26\1\62\1\26\4\25\1\26\1\0\1\54\1\55"+
    "\1\26\1\56\4\26\1\57\1\60\2\26\1\145\1\61"+
    "\1\26\1\62\1\26\4\25\1\26\1\0\1\54\1\55"+
    "\1\26\1\56\3\26\1\113\1\57\1\60\3\26\1\61"+
    "\1\26\1\146\1\26\4\25\1\26\1\0\1\54\1\55"+
    "\1\26\1\56\1\114\3\26\1\57\1\60\1\114\1\115"+
    "\1\26\1\61\1\26\1\62\1\26\4\25\1\26\1\0"+
    "\1\54\1\55\1\26\1\117\4\26\1\57\1\60\3\26"+
    "\1\61\1\147\1\62\1\26\4\25\1\26\1\0\1\54"+
    "\1\55\1\26\1\56\4\26\1\57\1\120\3\26\1\61"+
    "\1\26\1\62\1\114\5\150\1\0\21\150\5\151\1\0"+
    "\21\151\5\152\1\0\21\152\5\153\1\0\21\153\5\154"+
    "\1\0\21\154\5\14\1\0\1\14\1\155\17\14\5\156"+
    "\1\0\21\156\4\157\1\160\1\0\1\161\1\162\1\160"+
    "\1\163\4\160\1\164\1\165\3\160\1\166\1\160\1\167"+
    "\1\160\4\170\1\171\1\0\1\172\1\173\1\171\1\174"+
    "\4\171\1\175\1\176\3\171\1\177\1\171\1\200\1\171"+
    "\4\201\1\202\1\0\1\203\1\204\1\202\1\205\4\202"+
    "\1\206\1\207\3\202\1\210\1\202\1\211\1\202\4\212"+
    "\1\213\1\0\1\214\1\215\1\213\1\216\4\213\1\217"+
    "\1\220\3\213\1\221\1\213\1\222\1\213\4\223\1\224"+
    "\1\0\1\225\1\226\1\224\1\227\4\224\1\230\1\231"+
    "\3\224\1\232\1\224\1\233\1\224\4\23\1\24\1\0"+
    "\1\36\1\234\1\24\1\40\4\24\1\41\1\42\3\24"+
    "\1\43\1\24\1\44\1\24\4\235\1\236\1\0\1\237"+
    "\1\240\1\236\1\241\4\236\1\242\1\243\3\236\1\244"+
    "\1\236\1\245\1\236\5\246\1\0\21\246\5\247\1\0"+
    "\21\247\5\250\1\0\21\250\5\14\1\0\1\14\1\251"+
    "\17\14\4\252\1\253\1\0\1\254\1\255\1\253\1\256"+
    "\4\253\1\257\1\260\3\253\1\261\1\253\1\262\1\253"+
    "\4\263\1\264\1\0\1\265\1\266\1\264\1\267\4\264"+
    "\1\270\1\271\3\264\1\272\1\264\1\273\1\264\4\274"+
    "\1\275\1\0\1\276\1\277\1\275\1\300\4\275\1\301"+
    "\1\302\3\275\1\303\1\275\1\304\1\275\4\25\1\26"+
    "\1\0\1\54\1\305\1\26\1\56\4\26\1\57\1\60"+
    "\3\26\1\61\1\26\1\62\1\26\5\14\1\0\1\306"+
    "\2\14\1\307\2\14\1\310\17\14\1\0\1\311\10\14"+
    "\1\51\4\14\1\312\1\53\6\14\1\0\1\313\2\14"+
    "\1\314\22\14\1\0\16\14\1\315\7\14\1\0\1\306"+
    "\2\14\1\316\2\14\1\310\12\14\5\317\1\0\21\317"+
    "\5\14\1\0\1\45\2\14\1\316\5\14\1\51\14\14"+
    "\1\0\1\320\1\30\1\14\1\31\2\14\1\310\1\14"+
    "\1\32\1\33\3\14\1\34\1\14\1\35\1\14\4\23"+
    "\1\24\1\0\1\321\1\37\1\24\1\40\2\24\1\322"+
    "\1\24\1\41\1\42\3\24\1\43\1\24\1\44\1\24"+
    "\4\23\1\24\1\0\1\321\1\73\1\24\1\40\2\24"+
    "\1\322\1\24\1\41\1\42\3\24\1\43\1\24\1\44"+
    "\1\24\4\23\1\24\1\0\1\321\1\37\1\24\1\40"+
    "\2\24\1\322\1\74\1\41\1\42\3\24\1\43\1\24"+
    "\1\44\1\24\4\23\1\24\1\0\1\321\1\37\1\24"+
    "\1\40\1\75\1\24\1\322\1\24\1\41\1\42\1\24"+
    "\1\76\1\24\1\43\1\24\1\44\1\24\4\23\1\24"+
    "\1\0\1\321\1\77\1\24\1\40\2\24\1\322\1\24"+
    "\1\41\1\42\3\24\1\43\1\24\1\44\1\24\4\23"+
    "\1\24\1\0\1\321\1\37\1\24\1\100\2\24\1\322"+
    "\1\24\1\41\1\42\3\24\1\43\1\24\1\44\1\24"+
    "\4\23\1\24\1\0\1\321\1\37\1\24\1\40\2\24"+
    "\1\322\1\24\1\41\1\101\3\24\1\43\1\24\1\44"+
    "\1\24\4\23\1\24\1\0\1\321\1\37\1\24\1\40"+
    "\2\24\1\322\1\24\1\41\1\42\3\24\1\102\1\24"+
    "\1\44\1\24\5\14\1\0\1\323\1\30\1\14\1\31"+
    "\4\14\1\32\1\33\3\14\1\34\1\312\1\35\1\14"+
    "\4\23\1\24\1\0\1\324\1\37\1\24\1\40\4\24"+
    "\1\41\1\42\3\24\1\43\1\325\1\44\1\24\4\23"+
    "\1\24\1\0\1\324\1\73\1\24\1\40\4\24\1\41"+
    "\1\42\3\24\1\43\1\325\1\44\1\24\4\23\1\24"+
    "\1\0\1\324\1\37\1\24\1\40\3\24\1\74\1\41"+
    "\1\42\3\24\1\43\1\325\1\134\1\24\4\23\1\24"+
    "\1\0\1\324\1\37\1\24\1\40\1\75\3\24\1\41"+
    "\1\42\1\24\1\76\1\24\1\43\1\325\1\44\1\24"+
    "\4\23\1\24\1\0\1\324\1\77\1\24\1\40\4\24"+
    "\1\41\1\42\3\24\1\43\1\325\1\44\1\24\4\23"+
    "\1\24\1\0\1\324\1\37\1\24\1\100\4\24\1\41"+
    "\1\42\3\24\1\43\1\325\1\44\1\24\4\23\1\24"+
    "\1\0\1\324\1\37\1\24\1\40\4\24\1\41\1\101"+
    "\3\24\1\43\1\325\1\44\1\24\4\23\1\24\1\0"+
    "\1\324\1\37\1\24\1\40\4\24\1\41\1\42\3\24"+
    "\1\102\1\325\1\44\1\24\5\14\1\0\1\323\1\30"+
    "\1\14\1\326\4\14\1\32\1\33\3\14\1\34\1\14"+
    "\1\35\1\14\4\23\1\24\1\0\1\324\1\37\1\24"+
    "\1\327\4\24\1\41\1\42\3\24\1\43\1\24\1\44"+
    "\1\24\4\23\1\24\1\0\1\324\1\73\1\24\1\327"+
    "\4\24\1\41\1\42\3\24\1\43\1\24\1\44\1\24"+
    "\4\23\1\24\1\0\1\324\1\37\1\24\1\327\3\24"+
    "\1\74\1\41\1\42\3\24\1\43\1\24\1\44\1\24"+
    "\4\23\1\24\1\0\1\324\1\37\1\24\1\327\1\75"+
    "\3\24\1\41\1\42\1\24\1\76\1\24\1\43\1\24"+
    "\1\44\1\24\4\23\1\24\1\0\1\324\1\77\1\24"+
    "\1\327\4\24\1\41\1\42\3\24\1\43\1\24\1\44"+
    "\1\24\4\23\1\24\1\0\1\324\1\37\1\24\1\330"+
    "\4\24\1\41\1\42\3\24\1\43\1\24\1\44\1\24"+
    "\4\23\1\24\1\0\1\324\1\37\1\24\1\327\4\24"+
    "\1\41\1\101\3\24\1\43\1\24\1\44\1\24\4\23"+
    "\1\24\1\0\1\324\1\37\1\24\1\327\4\24\1\41"+
    "\1\42\3\24\1\102\1\24\1\44\1\24\5\14\1\0"+
    "\1\27\1\30\1\14\1\31\4\14\1\32\1\33\3\14"+
    "\1\34\1\315\1\35\1\14\4\23\1\24\1\0\1\36"+
    "\1\37\1\24\1\40\4\24\1\41\1\42\3\24\1\43"+
    "\1\325\1\44\1\24\4\23\1\24\1\0\1\36\1\73"+
    "\1\24\1\40\4\24\1\41\1\42\3\24\1\43\1\325"+
    "\1\44\1\24\4\23\1\24\1\0\1\36\1\37\1\24"+
    "\1\40\3\24\1\74\1\41\1\42\3\24\1\43\1\325"+
    "\1\44\1\24\4\23\1\24\1\0\1\36\1\37\1\24"+
    "\1\40\1\75\3\24\1\41\1\42\1\24\1\76\1\24"+
    "\1\43\1\325\1\44\1\24\4\23\1\24\1\0\1\36"+
    "\1\77\1\24\1\40\4\24\1\41\1\42\3\24\1\43"+
    "\1\325\1\44\1\24\4\23\1\24\1\0\1\36\1\37"+
    "\1\24\1\100\4\24\1\41\1\42\3\24\1\43\1\325"+
    "\1\44\1\24\4\23\1\24\1\0\1\36\1\37\1\24"+
    "\1\40\4\24\1\41\1\101\3\24\1\43\1\325\1\44"+
    "\1\137\4\23\1\24\1\0\1\36\1\37\1\24\1\40"+
    "\4\24\1\41\1\42\3\24\1\102\1\325\1\44\1\24"+
    "\5\14\1\0\1\320\1\30\1\14\1\326\2\14\1\310"+
    "\1\14\1\32\1\33\3\14\1\34\1\14\1\35\1\14"+
    "\4\23\1\24\1\0\1\321\1\37\1\24\1\327\2\24"+
    "\1\322\1\24\1\41\1\42\3\24\1\43\1\24\1\44"+
    "\1\24\4\23\1\24\1\0\1\321\1\73\1\24\1\327"+
    "\2\24\1\322\1\24\1\41\1\42\3\24\1\43\1\24"+
    "\1\44\1\24\4\23\1\24\1\0\1\321\1\37\1\24"+
    "\1\327\2\24\1\322\1\74\1\41\1\42\3\24\1\43"+
    "\1\24\1\44\1\24\4\23\1\24\1\0\1\321\1\37"+
    "\1\24\1\327\1\75\1\24\1\322\1\24\1\41\1\42"+
    "\1\24\1\76\1\24\1\43\1\24\1\44\1\24\4\23"+
    "\1\24\1\0\1\321\1\77\1\24\1\327\2\24\1\322"+
    "\1\24\1\41\1\42\3\24\1\43\1\24\1\44\1\24"+
    "\4\23\1\24\1\0\1\321\1\37\1\24\1\330\2\24"+
    "\1\322\1\24\1\41\1\42\3\24\1\43\1\24\1\44"+
    "\1\24\4\23\1\24\1\0\1\321\1\37\1\24\1\327"+
    "\2\24\1\322\1\24\1\41\1\101\3\24\1\43\1\24"+
    "\1\44\1\24\4\23\1\24\1\0\1\321\1\37\1\24"+
    "\1\327\2\24\1\322\1\24\1\41\1\42\3\24\1\102"+
    "\1\24\1\44\1\24\4\331\1\332\1\0\1\333\1\334"+
    "\1\332\1\335\3\332\1\336\1\337\1\340\3\332\1\341"+
    "\1\332\1\342\1\332\5\14\1\0\1\27\1\30\1\14"+
    "\1\326\4\14\1\32\1\33\3\14\1\34\1\14\1\35"+
    "\1\14\4\23\1\24\1\0\1\36\1\37\1\24\1\327"+
    "\4\24\1\41\1\42\3\24\1\43\1\24\1\44\1\24"+
    "\4\23\1\24\1\0\1\36\1\73\1\24\1\327\4\24"+
    "\1\41\1\42\3\24\1\43\1\24\1\44\1\24\4\23"+
    "\1\24\1\0\1\36\1\37\1\24\1\327\3\24\1\74"+
    "\1\41\1\42\3\24\1\43\1\24\1\44\1\24\4\23"+
    "\1\24\1\0\1\36\1\37\1\24\1\327\1\75\3\24"+
    "\1\41\1\42\1\24\1\76\1\24\1\43\1\24\1\44"+
    "\1\24\4\23\1\24\1\0\1\36\1\77\1\24\1\327"+
    "\4\24\1\41\1\42\3\24\1\43\1\24\1\44\1\24"+
    "\4\23\1\24\1\0\1\36\1\37\1\24\1\330\4\24"+
    "\1\41\1\42\3\24\1\43\1\24\1\44\1\24\4\23"+
    "\1\24\1\0\1\36\1\37\1\24\1\327\4\24\1\41"+
    "\1\101\3\24\1\43\1\24\1\44\1\24\4\23\1\24"+
    "\1\0\1\36\1\37\1\24\1\327\4\24\1\41\1\42"+
    "\3\24\1\102\1\24\1\44\1\24\5\14\1\0\1\343"+
    "\25\14\1\0\1\343\2\14\1\314\22\14\1\0\16\14"+
    "\1\312\2\14\5\344\1\0\21\344\5\14\1\0\1\345"+
    "\1\46\1\14\1\47\4\14\1\50\1\51\3\14\1\52"+
    "\1\14\1\53\1\14\4\25\1\26\1\0\1\346\1\55"+
    "\1\26\1\56\4\26\1\57\1\60\3\26\1\61\1\26"+
    "\1\62\1\26\4\25\1\26\1\0\1\346\1\112\1\26"+
    "\1\56\4\26\1\57\1\60\3\26\1\61\1\26\1\62"+
    "\1\26\4\25\1\26\1\0\1\346\1\55\1\26\1\56"+
    "\3\26\1\113\1\57\1\60\3\26\1\61\1\26\1\146"+
    "\1\26\4\25\1\26\1\0\1\346\1\55\1\26\1\56"+
    "\1\114\3\26\1\57\1\60\1\26\1\115\1\26\1\61"+
    "\1\26\1\62\1\26\4\25\1\26\1\0\1\346\1\116"+
    "\1\26\1\56\4\26\1\57\1\60\3\26\1\61\1\26"+
    "\1\62\1\26\4\25\1\26\1\0\1\346\1\55\1\26"+
    "\1\117\4\26\1\57\1\60\3\26\1\61\1\26\1\62"+
    "\1\26\4\25\1\26\1\0\1\346\1\55\1\26\1\56"+
    "\4\26\1\57\1\120\3\26\1\61\1\26\1\62\1\26"+
    "\4\25\1\26\1\0\1\346\1\55\1\26\1\56\4\26"+
    "\1\57\1\60\3\26\1\121\1\26\1\62\1\26\5\14"+
    "\1\0\1\345\1\46\1\14\1\347\4\14\1\50\1\51"+
    "\3\14\1\52\1\14\1\53\1\14\4\25\1\26\1\0"+
    "\1\346\1\55\1\26\1\350\4\26\1\57\1\60\3\26"+
    "\1\61\1\26\1\62\1\26\4\25\1\26\1\0\1\346"+
    "\1\112\1\26\1\350\4\26\1\57\1\60\3\26\1\61"+
    "\1\26\1\62\1\26\4\25\1\26\1\0\1\346\1\55"+
    "\1\26\1\350\3\26\1\113\1\57\1\60\3\26\1\61"+
    "\1\26\1\62\1\26\4\25\1\26\1\0\1\346\1\55"+
    "\1\26\1\350\1\114\3\26\1\57\1\60\1\26\1\115"+
    "\1\26\1\61\1\26\1\62\1\26\4\25\1\26\1\0"+
    "\1\346\1\116\1\26\1\350\4\26\1\57\1\60\3\26"+
    "\1\61\1\26\1\62\1\26\4\25\1\26\1\0\1\346"+
    "\1\55\1\26\1\351\4\26\1\57\1\60\3\26\1\61"+
    "\1\26\1\62\1\26\4\25\1\26\1\0\1\346\1\55"+
    "\1\26\1\350\4\26\1\57\1\120\3\26\1\61\1\26"+
    "\1\62\1\26\4\25\1\26\1\0\1\346\1\55\1\26"+
    "\1\350\4\26\1\57\1\60\3\26\1\121\1\26\1\62"+
    "\1\26\5\14\1\0\1\45\1\46\1\14\1\47\4\14"+
    "\1\50\1\51\3\14\1\52\1\312\1\53\1\14\4\25"+
    "\1\26\1\0\1\54\1\55\1\26\1\56\4\26\1\57"+
    "\1\60\3\26\1\61\1\352\1\62\1\26\4\25\1\26"+
    "\1\0\1\54\1\112\1\26\1\56\4\26\1\57\1\60"+
    "\3\26\1\61\1\352\1\62\1\26\4\25\1\26\1\0"+
    "\1\54\1\55\1\26\1\56\3\26\1\113\1\57\1\60"+
    "\3\26\1\61\1\352\1\62\1\26\4\25\1\26\1\0"+
    "\1\54\1\55\1\26\1\56\1\114\3\26\1\57\1\60"+
    "\1\26\1\115\1\26\1\61\1\352\1\62\1\26\4\25"+
    "\1\26\1\0\1\54\1\116\1\26\1\56\4\26\1\57"+
    "\1\60\3\26\1\61\1\352\1\62\1\26\4\25\1\26"+
    "\1\0\1\54\1\55\1\26\1\117\4\26\1\57\1\60"+
    "\3\26\1\61\1\352\1\62\1\26\4\25\1\26\1\0"+
    "\1\54\1\55\1\26\1\56\4\26\1\57\1\120\3\26"+
    "\1\61\1\352\1\62\1\114\4\25\1\26\1\0\1\54"+
    "\1\55\1\26\1\56\4\26\1\57\1\60\3\26\1\121"+
    "\1\352\1\62\1\26\4\353\1\26\1\0\1\54\1\55"+
    "\1\26\1\56\3\26\1\113\1\57\1\60\3\26\1\61"+
    "\1\26\1\62\1\26\5\14\1\0\5\14\1\65\20\14"+
    "\1\0\4\14\1\65\21\14\1\0\7\14\1\354\16\14"+
    "\1\0\1\14\1\355\24\14\1\0\15\14\1\356\10\14"+
    "\1\0\1\14\1\357\24\14\1\0\1\65\25\14\1\0"+
    "\15\14\1\360\10\14\1\0\1\65\3\14\1\65\21\14"+
    "\1\0\1\361\25\14\1\0\1\14\1\63\3\14\1\65"+
    "\13\14\4\23\1\24\1\0\1\36\1\73\1\24\1\40"+
    "\1\24\1\75\2\24\1\41\1\42\3\24\1\43\1\24"+
    "\1\44\1\24\4\23\1\24\1\0\1\36\1\37\1\24"+
    "\1\40\3\24\1\362\1\41\1\42\3\24\1\43\1\24"+
    "\1\44\1\24\5\14\1\0\1\14\1\363\17\14\4\23"+
    "\1\24\1\0\1\36\1\364\1\24\1\40\4\24\1\41"+
    "\1\42\3\24\1\43\1\24\1\44\1\24\4\23\1\24"+
    "\1\0\1\36\1\37\1\24\1\40\4\24\1\41\1\42"+
    "\3\24\1\365\1\24\1\44\1\24\5\14\1\0\1\65"+
    "\3\14\1\65\6\14\1\66\5\14\4\23\1\24\1\0"+
    "\1\366\1\37\1\24\1\40\1\75\3\24\1\41\1\42"+
    "\1\24\1\76\1\24\1\43\1\24\1\44\1\24\4\23"+
    "\1\24\1\0\1\366\1\37\1\24\1\40\1\75\3\24"+
    "\1\41\1\42\1\135\1\76\1\24\1\43\1\24\1\44"+
    "\1\24\5\14\1\0\1\323\1\30\1\14\1\31\4\14"+
    "\1\32\1\33\3\14\1\34\1\14\1\35\1\14\4\23"+
    "\1\24\1\0\1\324\1\37\1\24\1\40\4\24\1\41"+
    "\1\42\3\24\1\43\1\24\1\44\1\24\4\23\1\24"+
    "\1\0\1\324\1\73\1\24\1\40\4\24\1\41\1\42"+
    "\3\24\1\43\1\24\1\44\1\24\4\23\1\24\1\0"+
    "\1\324\1\37\1\24\1\40\3\24\1\74\1\41\1\42"+
    "\3\24\1\43\1\24\1\44\1\24\4\23\1\24\1\0"+
    "\1\324\1\37\1\24\1\40\1\75\3\24\1\41\1\42"+
    "\1\24\1\76\1\24\1\43\1\24\1\44\1\24\4\23"+
    "\1\24\1\0\1\324\1\37\1\24\1\40\4\24\1\132"+
    "\1\42\3\24\1\43\1\24\1\44\1\24\4\23\1\24"+
    "\1\0\1\324\1\77\1\24\1\40\4\24\1\41\1\42"+
    "\3\24\1\43\1\24\1\44\1\24\4\23\1\24\1\0"+
    "\1\324\1\37\1\24\1\100\4\24\1\41\1\42\3\24"+
    "\1\43\1\24\1\44\1\24\4\23\1\24\1\0\1\324"+
    "\1\37\1\24\1\40\4\24\1\41\1\101\3\24\1\43"+
    "\1\24\1\44\1\24\4\23\1\24\1\0\1\324\1\37"+
    "\1\24\1\40\4\24\1\41\1\42\3\24\1\102\1\24"+
    "\1\44\1\24\5\14\1\0\1\14\1\367\24\14\1\0"+
    "\1\370\25\14\1\0\1\14\1\371\17\14\4\25\1\26"+
    "\1\0\1\54\1\372\1\26\1\56\4\26\1\57\1\60"+
    "\3\26\1\61\1\26\1\62\1\26\5\14\1\0\1\65"+
    "\3\14\1\65\6\14\1\105\5\14\4\25\1\26\1\0"+
    "\1\373\1\55\1\26\1\56\1\114\3\26\1\57\1\60"+
    "\1\26\1\115\1\26\1\61\1\26\1\62\1\26\4\25"+
    "\1\26\1\0\1\373\1\55\1\26\1\56\1\114\3\26"+
    "\1\57\1\60\1\114\1\115\1\26\1\61\1\26\1\62"+
    "\1\26\4\25\1\26\1\0\1\54\1\55\1\26\1\56"+
    "\4\26\1\57\1\60\3\26\1\374\1\26\1\62\1\26"+
    "\5\14\1\0\1\375\1\46\1\14\1\47\4\14\1\50"+
    "\1\51\3\14\1\52\1\14\1\53\6\14\1\0\10\14"+
    "\1\65\15\14\1\0\2\14\1\376\23\14\1\0\11\14"+
    "\1\377\14\14\1\0\2\14\1\u0100\23\14\1\0\11\14"+
    "\1\376\14\14\1\0\1\14\1\u0101\17\14\4\23\1\24"+
    "\1\0\1\36\1\37\1\24\1\40\4\24\1\u0102\1\42"+
    "\3\24\1\43\1\24\1\44\1\24\5\14\1\0\2\14"+
    "\1\126\16\14\4\23\1\24\1\0\1\36\1\37\1\135"+
    "\1\40\3\24\1\74\1\41\1\42\3\24\1\43\1\24"+
    "\1\44\1\24\4\23\1\24\1\0\1\36\1\37\1\24"+
    "\1\40\4\24\1\41\1\u0103\3\24\1\43\1\24\1\44"+
    "\1\24\5\14\1\0\2\14\1\377\23\14\1\0\1\14"+
    "\1\u0104\24\14\1\0\2\14\1\u0105\16\14\4\25\1\26"+
    "\1\0\1\54\1\55\1\u0106\1\56\3\26\1\113\1\57"+
    "\1\60\3\26\1\61\1\26\1\62\1\26\4\25\1\26"+
    "\1\0\1\54\1\55\1\26\1\56\4\26\1\57\1\u0107"+
    "\3\26\1\61\1\26\1\62\1\26\5\14\1\0\1\14"+
    "\1\u0108\17\14\5\u0109\1\0\21\u0109\5\u010a\1\0\21\u010a"+
    "\5\u010b\1\0\21\u010b\5\14\1\0\2\14\1\u010c\16\14"+
    "\4\235\1\236\1\0\1\237\1\240\1\236\1\u010d\4\236"+
    "\1\242\1\243\3\236\1\244\1\u010e\1\245\1\236\5\14"+
    "\1\0\2\14\1\u010f\16\14\4\u0110\1\u0111\1\0\1\u0112"+
    "\1\u0113\1\u0111\1\u0114\4\u0111\1\u0115\1\u0116\3\u0111\1\u0117"+
    "\1\u0111\1\u0118\1\u0111\4\u0110\1\u0111\1\0\1\u0112\1\u0113"+
    "\1\u0111\1\u0119\4\u0111\1\u0115\1\u0116\3\u0111\1\u0117\1\u011a"+
    "\1\u0118\1\u0111\5\14\1\0\2\14\1\u011b\23\14\1\0"+
    "\3\14\1\316\22\14\1\0\3\14\1\314\22\14\1\0"+
    "\1\306\2\14\1\314\15\14\4\23\1\24\1\0\1\36"+
    "\1\37\1\24\1\327\1\75\3\24\1\41\1\42\1\135"+
    "\1\76\1\24\1\43\1\24\1\44\1\24\4\23\1\24"+
    "\1\0\1\36\1\234\1\24\1\327\4\24\1\41\1\42"+
    "\3\24\1\43\1\24\1\44\1\24\5\u011c\1\0\21\u011c"+
    "\5\14\1\0\1\45\1\46\1\14\1\347\4\14\1\50"+
    "\1\51\3\14\1\52\1\14\1\53\1\14\4\25\1\26"+
    "\1\0\1\54\1\55\1\26\1\350\4\26\1\57\1\60"+
    "\3\26\1\61\1\26\1\62\1\26\4\25\1\26\1\0"+
    "\1\54\1\112\1\26\1\350\4\26\1\57\1\60\3\26"+
    "\1\61\1\26\1\62\1\26\4\25\1\26\1\0\1\54"+
    "\1\55\1\26\1\350\3\26\1\113\1\57\1\60\3\26"+
    "\1\61\1\26\1\62\1\26\4\25\1\26\1\0\1\54"+
    "\1\55\1\26\1\350\1\114\3\26\1\57\1\60\1\26"+
    "\1\115\1\26\1\61\1\26\1\62\1\26\4\25\1\26"+
    "\1\0\1\54\1\116\1\26\1\350\4\26\1\57\1\60"+
    "\3\26\1\61\1\26\1\62\1\26\4\25\1\26\1\0"+
    "\1\54\1\55\1\26\1\351\4\26\1\57\1\60\3\26"+
    "\1\61\1\26\1\62\1\26\4\25\1\26\1\0\1\54"+
    "\1\55\1\26\1\350\4\26\1\57\1\120\3\26\1\61"+
    "\1\26\1\62\1\26\4\25\1\26\1\0\1\54\1\55"+
    "\1\26\1\350\4\26\1\57\1\60\3\26\1\121\1\26"+
    "\1\62\1\26\4\25\1\26\1\0\1\54\1\55\1\26"+
    "\1\350\1\114\3\26\1\57\1\60\1\114\1\115\1\26"+
    "\1\61\1\26\1\62\1\26\4\25\1\26\1\0\1\54"+
    "\1\305\1\26\1\350\4\26\1\57\1\60\3\26\1\61"+
    "\1\26\1\62\1\26\5\14\1\0\3\14\1\307\15\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6187];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\u0111\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String Tipo;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Validar2(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Validar2(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 84) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Palabra2 yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return ERROR;
          }
        case 3: break;
        case 2: 
          { Tipo=yytext(); return correo_valido;
          }
        case 4: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
